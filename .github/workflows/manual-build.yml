name: Manual Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build for"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - windows
          - macos
          - linux

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
            platform: macos
          - os: macos-latest
            arch: x64
            platform: macos
          - os: macos-latest
            arch: universal
            platform: macos
          - os: ubuntu-latest
            arch: x64
            platform: linux
          - os: windows-latest
            arch: x64
            platform: windows

    steps:
      - name: Check platform selection
        if: github.event.inputs.platform != 'all' && github.event.inputs.platform != matrix.platform
        run: exit 0

      - name: Checkout repository
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        uses: actions/checkout@v4

      - name: Setup pnpm
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: Import Code-Signing Certificates (macOS)
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && startsWith(matrix.os, 'macos-')
        uses: Apple-Actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.MAC_CERTS }}
          p12-password: ${{ secrets.MAC_CERTS_PASSWORD }}

      - name: Install dependencies
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        run: pnpm install --frozen-lockfile --ignore-scripts
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Rebuild Windows native modules
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows') && matrix.os == 'windows-latest'
        run: pnpm rebuild electron-winstaller @bitdisaster/exe-icon-extractor electron-wix-msi

      - name: Generate paraglide files
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        run: npx @inlang/paraglide-js compile --project ./project.inlang --outdir ./src/lib/paraglide

      - name: Run quality checks
        if: github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform
        run: |
          npx eslint electron/main/
          pnpm run check

      - name: Build application
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform) && matrix.arch != 'universal'
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          # macOS 签名和公证环境变量
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: pnpm run make -- --arch=${{ matrix.arch }}

      # Universal binary build steps - 重新打包未签名的 x64 和 arm64 后合并
      - name: Package x64 (unsigned) for universal build
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && matrix.arch == 'universal'
        env:
          NODE_OPTIONS: --max-old-space-size=8192
        run: pnpm run package -- --arch=x64

      - name: Package arm64 (unsigned) for universal build
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && matrix.arch == 'universal'
        env:
          NODE_OPTIONS: --max-old-space-size=8192
        run: pnpm run package -- --arch=arm64

      - name: Create universal binary
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && matrix.arch == 'universal'
        env:
          NODE_OPTIONS: --max-old-space-size=8192
        run: pnpm run package:universal

      - name: Create distributable (universal)
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && matrix.arch == 'universal'
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: pnpm run make -- --arch=universal

      - name: Upload Windows artifacts
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows') && matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.run_number }}
          path: |
            out/make/squirrel.windows/**/*
            out/make/zip/win32/**/*
            out/make/wix/win32/**/*

      - name: Upload macOS artifacts
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && startsWith(matrix.os, 'macos-') && matrix.arch != 'universal'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build-${{ github.run_number }}
          path: |
            out/make/*.dmg
            out/make/zip/**/*

      - name: Upload macOS universal artifacts
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos') && matrix.arch == 'universal'
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-build-${{ github.run_number }}
          path: |
            out/make/*.dmg
            out/make/zip/**/*

      - name: Upload Linux artifacts
        if: (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'linux') && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ github.run_number }}
          path: |
            out/make/deb/**/*
            out/make/rpm/**/*
