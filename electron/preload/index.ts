import { electronAPI as electrontToolkitAPI } from "@electron-toolkit/preload";
import type { Theme } from "@shared/types";
import { contextBridge, ipcRenderer } from "electron";
import { parse } from "superjson";
import { autoGeneratedServices } from "../main/generated/preload-services";
import { getAdditionalArgv, loadDataFromTempFile } from "../main/utils";

const app = {
	platform: process.platform,
};

const tabdata = getAdditionalArgv("tab");
const tab = tabdata ? parse(tabdata ?? "") : tabdata;
const tabsData = getAdditionalArgv("tabs");
const tabs = tabsData ? parse(tabsData ?? "") : [];

const windowId = getAdditionalArgv("window-id") ?? "";

const threadFilePath = getAdditionalArgv("thread-file") ?? "";
const messagesFilePath = getAdditionalArgv("messages-file") ?? "";

const thread = loadDataFromTempFile(threadFilePath) ?? {};
const messages = loadDataFromTempFile(messagesFilePath) ?? {};

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
	try {
		contextBridge.exposeInMainWorld("electron", electrontToolkitAPI);
		contextBridge.exposeInMainWorld("electronAPI", {
			theme: {
				setTheme: (theme: Theme) => ipcRenderer.send("app:theme:setTheme", theme),
				onThemeChange: (callback: (theme: Theme) => void) => {
					ipcRenderer.on("app:theme:setTheme", (_, theme) => callback(theme));
				},
				getCurrentTheme: () => ipcRenderer.invoke("app:theme:getCurrentTheme"),
			},
			...autoGeneratedServices,
		});

		// Expose IPC listener for theme changes
		contextBridge.exposeInMainWorld("electronIPC", {
			onThemeChange: (callback: (theme: string) => void) => {
				ipcRenderer.on("theme:set", (_, theme) => callback(theme));
			},
		});

		// Expose shell window ID from process arguments
		contextBridge.exposeInMainWorld("windowId", windowId);
		contextBridge.exposeInMainWorld("tab", tab);
		contextBridge.exposeInMainWorld("tabs", tabs);
		contextBridge.exposeInMainWorld("app", app);
		contextBridge.exposeInMainWorld("thread", thread);
		contextBridge.exposeInMainWorld("messages", messages);
	} catch (error) {
		console.error("Preload: Error exposing services", { error });
	}
} else {
	window.app = app;
	window.electron = electrontToolkitAPI;
}
