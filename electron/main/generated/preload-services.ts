import { ipcRenderer } from "electron";
import type {
	StorageValue,
	StorageOptions,
	StorageMetadata,
	StorageMeta,
	StorageItem,
	Theme,
	ThreadData,
	TabType,
	Tab,
} from "@shared/types";

/**
 * Auto-generated IPC service interfaces
 */
export interface AutoGeneratedIpcServices {
	storageService: {
		setItem(key: string, value: StorageValue): Promise<void>;
		getItem(key: string): Promise<StorageValue | null>;
		hasItem(key: string): Promise<boolean>;
		removeItem(key: string, options: StorageOptions): Promise<void>;
		getKeys(base: string): Promise<string[]>;
		clear(base: string): Promise<void>;
		getMeta(key: string): Promise<StorageMetadata>;
		setMeta(key: string, metadata: StorageMeta): Promise<void>;
		removeMeta(key: string): Promise<void>;
		getItems(keys: string[]): Promise<StorageItem<StorageValue>[]>;
		setItems(items: StorageItem<StorageValue>[]): Promise<void>;
		watch(watchKey: string): Promise<void>;
		unwatch(watchKey: string): Promise<void>;
	};
	appService: {
		setTheme(theme: Theme): Promise<void>;
	};
	threadService: {
		getThreads(): Promise<ThreadData[] | null>;
		getThread(threadId: string): Promise<ThreadData | null>;
		deleteThread(threadId: string): Promise<boolean>;
	};
	tabService: {
		handleNewTabWithThread(
			threadId: string,
			title: string,
			type: TabType,
			active: boolean,
		): Promise<string | null>;
		handleNewTab(title: string, type: TabType, active: boolean): Promise<string | null>;
		handleActivateTab(tabId: string): Promise<void>;
		getActiveTab(): Promise<Tab | null>;
		handleTabClose(tabId: string, newActiveTabId: string | null): Promise<void>;
		handleTabCloseOthers(tabId: string, tabIdsToClose: string[]): Promise<void>;
		handleTabCloseOffside(
			tabId: string,
			tabIdsToClose: string[],
			_remainingTabIds: string[],
			shouldSwitchActive: boolean,
		): Promise<void>;
		handleTabCloseAll(): Promise<void>;
		handleShellViewLevel(up: boolean): Promise<void>;
	};
	windowService: {
		handleSplitShellWindow(triggerTabId: string): Promise<string | null>;
		handleMoveTabIntoExistingWindow(triggerTabId: string, windowId: string): Promise<void>;
	};
}

/**
 * Auto-generated service implementations
 */
export const autoGeneratedServices: AutoGeneratedIpcServices = {
	storageService: {
		setItem: (key: string, value: StorageValue) =>
			ipcRenderer.invoke("storageService:setItem", key, value),
		getItem: (key: string) => ipcRenderer.invoke("storageService:getItem", key),
		hasItem: (key: string) => ipcRenderer.invoke("storageService:hasItem", key),
		removeItem: (key: string, options: StorageOptions) =>
			ipcRenderer.invoke("storageService:removeItem", key, options),
		getKeys: (base: string) => ipcRenderer.invoke("storageService:getKeys", base),
		clear: (base: string) => ipcRenderer.invoke("storageService:clear", base),
		getMeta: (key: string) => ipcRenderer.invoke("storageService:getMeta", key),
		setMeta: (key: string, metadata: StorageMeta) =>
			ipcRenderer.invoke("storageService:setMeta", key, metadata),
		removeMeta: (key: string) => ipcRenderer.invoke("storageService:removeMeta", key),
		getItems: (keys: string[]) => ipcRenderer.invoke("storageService:getItems", keys),
		setItems: (items: StorageItem<StorageValue>[]) =>
			ipcRenderer.invoke("storageService:setItems", items),
		watch: (watchKey: string) => ipcRenderer.invoke("storageService:watch", watchKey),
		unwatch: (watchKey: string) => ipcRenderer.invoke("storageService:unwatch", watchKey),
	},
	appService: {
		setTheme: (theme: Theme) => ipcRenderer.invoke("appService:setTheme", theme),
	},
	threadService: {
		getThreads: () => ipcRenderer.invoke("threadService:getThreads"),
		getThread: (threadId: string) => ipcRenderer.invoke("threadService:getThread", threadId),
		deleteThread: (threadId: string) => ipcRenderer.invoke("threadService:deleteThread", threadId),
	},
	tabService: {
		handleNewTabWithThread: (threadId: string, title: string, type: TabType, active: boolean) =>
			ipcRenderer.invoke("tabService:handleNewTabWithThread", threadId, title, type, active),
		handleNewTab: (title: string, type: TabType, active: boolean) =>
			ipcRenderer.invoke("tabService:handleNewTab", title, type, active),
		handleActivateTab: (tabId: string) => ipcRenderer.invoke("tabService:handleActivateTab", tabId),
		getActiveTab: () => ipcRenderer.invoke("tabService:getActiveTab"),
		handleTabClose: (tabId: string, newActiveTabId: string | null) =>
			ipcRenderer.invoke("tabService:handleTabClose", tabId, newActiveTabId),
		handleTabCloseOthers: (tabId: string, tabIdsToClose: string[]) =>
			ipcRenderer.invoke("tabService:handleTabCloseOthers", tabId, tabIdsToClose),
		handleTabCloseOffside: (
			tabId: string,
			tabIdsToClose: string[],
			_remainingTabIds: string[],
			shouldSwitchActive: boolean,
		) =>
			ipcRenderer.invoke(
				"tabService:handleTabCloseOffside",
				tabId,
				tabIdsToClose,
				_remainingTabIds,
				shouldSwitchActive,
			),
		handleTabCloseAll: () => ipcRenderer.invoke("tabService:handleTabCloseAll"),
		handleShellViewLevel: (up: boolean) =>
			ipcRenderer.invoke("tabService:handleShellViewLevel", up),
	},
	windowService: {
		handleSplitShellWindow: (triggerTabId: string) =>
			ipcRenderer.invoke("windowService:handleSplitShellWindow", triggerTabId),
		handleMoveTabIntoExistingWindow: (triggerTabId: string, windowId: string) =>
			ipcRenderer.invoke("windowService:handleMoveTabIntoExistingWindow", triggerTabId, windowId),
	},
};

/**
 * Export type declaration extensions
 */
export interface ElectronAPIExtension {
	storageService: AutoGeneratedIpcServices["storageService"];
	appService: AutoGeneratedIpcServices["appService"];
	threadService: AutoGeneratedIpcServices["threadService"];
	tabService: AutoGeneratedIpcServices["tabService"];
	windowService: AutoGeneratedIpcServices["windowService"];
}
