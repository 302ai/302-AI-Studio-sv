import { ipcRenderer } from "electron";
import type { Theme, Platform } from "@shared/types";

/**
 * Auto-generated IPC service interfaces
 */
export interface AutoGeneratedIpcServices {
	appService: {
		setTheme(theme: Theme): Promise<void>;
		getCurrentTheme(): Promise<Theme>;
	};
	deviceService: {
		getPlatform(): Promise<Platform>;
	};
	storageService: {
		getItem(key: string): Promise<string | null>;
		setItem(key: string, value: string): Promise<void>;
		removeItem(key: string): Promise<void>;
		clear(): Promise<void>;
		key(index: number): Promise<string | null>;
		length(): Promise<number>;
		keys(): Promise<string[]>;
	};
}

/**
 * Auto-generated service implementations
 */
export const autoGeneratedServices: AutoGeneratedIpcServices = {
	appService: {
		setTheme: (theme: Theme) => ipcRenderer.invoke("appService:setTheme", theme),
		getCurrentTheme: () => ipcRenderer.invoke("appService:getCurrentTheme"),
	},
	deviceService: {
		getPlatform: () => ipcRenderer.invoke("deviceService:getPlatform"),
	},
	storageService: {
		getItem: (key: string) => ipcRenderer.invoke("storageService:getItem", key),
		setItem: (key: string, value: string) =>
			ipcRenderer.invoke("storageService:setItem", key, value),
		removeItem: (key: string) => ipcRenderer.invoke("storageService:removeItem", key),
		clear: () => ipcRenderer.invoke("storageService:clear"),
		key: (index: number) => ipcRenderer.invoke("storageService:key", index),
		length: () => ipcRenderer.invoke("storageService:length"),
		keys: () => ipcRenderer.invoke("storageService:keys"),
	},
};

/**
 * Export type declaration extensions
 */
export interface ElectronAPIExtension {
	appService: AutoGeneratedIpcServices["appService"];
	deviceService: AutoGeneratedIpcServices["deviceService"];
	storageService: AutoGeneratedIpcServices["storageService"];
}
