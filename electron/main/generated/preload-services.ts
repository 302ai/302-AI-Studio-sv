import { ipcRenderer } from "electron";

/**
 * Auto-generated IPC service interfaces
 */
export interface AutoGeneratedIpcServices {
	attachments: {
		openExternal(url: string): Promise<void>;
		openExternal2(url: string): Promise<void>;
		openExternal3(url: string): Promise<void>;
		openExternal4(url: string): Promise<void>;
	};
	window: {
		maximize(): Promise<void>;
		minimize(): Promise<void>;
		restore(): Promise<void>;
		close(): Promise<void>;
		getWindowState(): Promise<{
			isMaximized: boolean;
			isMinimized: boolean;
			width: number;
			height: number;
		}>;
		setWindowSize(width: number, height: number): Promise<void>;
		sayHello(): Promise<string>;
	};
}

/**
 * Auto-generated service implementations
 */
export const autoGeneratedServices: AutoGeneratedIpcServices = {
	attachments: {
		openExternal: (url: string) => ipcRenderer.invoke("app:attachments:openExternal", url),
		openExternal2: (url: string) => ipcRenderer.invoke("app:attachments:openExternal2", url),
		openExternal3: (url: string) => ipcRenderer.invoke("app:attachments:openExternal3", url),
		openExternal4: (url: string) => ipcRenderer.invoke("app:attachments:openExternal4", url),
	},
	window: {
		maximize: () => ipcRenderer.invoke("app:window:maximize"),
		minimize: () => ipcRenderer.invoke("app:window:minimize"),
		restore: () => ipcRenderer.invoke("app:window:restore"),
		close: () => ipcRenderer.invoke("app:window:close"),
		getWindowState: () => ipcRenderer.invoke("app:window:getWindowState"),
		setWindowSize: (width: number, height: number) =>
			ipcRenderer.invoke("app:window:setWindowSize", width, height),
		sayHello: () => ipcRenderer.invoke("app:window:sayHello"),
	},
};

/**
 * Export type declaration extensions
 */
export interface ElectronAPIExtension {
	attachments: AutoGeneratedIpcServices["attachments"];
	window: AutoGeneratedIpcServices["window"];
}
