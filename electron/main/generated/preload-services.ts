import { ipcRenderer } from "electron";
import type { Theme } from "@shared/types";

/**
 * Auto-generated IPC service interfaces
 */
export interface AutoGeneratedIpcServices {
	attachments: {
		openExternal(url: string): Promise<void>;
		openExternal2(url: string): Promise<void>;
		openExternal3(url: string): Promise<void>;
		openExternal4(url: string): Promise<void>;
	};
	app: {
		setTheme(theme: Theme): Promise<void>;
		getCurrentTheme(): Promise<Theme>;
	};
	storage: {
		getItem(key: string): Promise<string | null>;
		setItem(key: string, value: string): Promise<void>;
		removeItem(key: string): Promise<void>;
		clear(): Promise<void>;
		key(index: number): Promise<string | null>;
		length(): Promise<number>;
		keys(): Promise<string[]>;
	};
}

/**
 * Auto-generated service implementations
 */
export const autoGeneratedServices: AutoGeneratedIpcServices = {
	attachments: {
		openExternal: (url: string) => ipcRenderer.invoke("attachments:openExternal", url),
		openExternal2: (url: string) => ipcRenderer.invoke("attachments:openExternal2", url),
		openExternal3: (url: string) => ipcRenderer.invoke("attachments:openExternal3", url),
		openExternal4: (url: string) => ipcRenderer.invoke("attachments:openExternal4", url),
	},
	app: {
		setTheme: (theme: Theme) => ipcRenderer.invoke("app:setTheme", theme),
		getCurrentTheme: () => ipcRenderer.invoke("app:getCurrentTheme"),
	},
	storage: {
		getItem: (key: string) => ipcRenderer.invoke("storage:getItem", key),
		setItem: (key: string, value: string) => ipcRenderer.invoke("storage:setItem", key, value),
		removeItem: (key: string) => ipcRenderer.invoke("storage:removeItem", key),
		clear: () => ipcRenderer.invoke("storage:clear"),
		key: (index: number) => ipcRenderer.invoke("storage:key", index),
		length: () => ipcRenderer.invoke("storage:length"),
		keys: () => ipcRenderer.invoke("storage:keys"),
	},
};

/**
 * Export type declaration extensions
 */
export interface ElectronAPIExtension {
	attachments: AutoGeneratedIpcServices["attachments"];
	app: AutoGeneratedIpcServices["app"];
	storage: AutoGeneratedIpcServices["storage"];
}
